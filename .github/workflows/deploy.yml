name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      ECR_REGISTRY: 752725210089.dkr.ecr.ap-northeast-2.amazonaws.com
      ECR_REPOSITORY: fivelogs
      S3_BUCKET: fivelogs-bucket
      DEPLOY_APPLICATION: fivelogs
      DEPLOY_GROUP: fivelogs-group

    steps:
      # 1. 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      # 2. Java 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "corretto" # Amazon Corretto 사용

      ## application-secret.yml 생성
      - name: create application-secret.yml
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > backend/src/main/resources/application-secret.yml

      # 3. Gradle 캐시 설정
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('backend/**/*.gradle*', 'backend/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle 빌드
      - name: Build with Gradle
        working-directory: ./backend
        run: |
          chmod +x ./gradlew
          ./gradlew clean build --info
        env:
          JAVA_HOME: ${{ env.JAVA_HOME_21_X64 }} # actions/setup-java에서 설정된 Java 21 경로

      # 5. Docker 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 6. AWS 자격 증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 7. ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 8. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        working-directory: ./backend
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # 9. 배포 파일 ZIP 생성 및 S3 업로드
      - name: Upload to S3
        env:
          S3_BUCKET: ${{ env.S3_BUCKET }}
        working-directory: ./backend
        run: |
          chmod +x scripts/deploy.sh
          chmod +x scripts/zero_downtime_deploy.py
          zip -r deployment.zip appspec.yml scripts/deploy.sh scripts/zero_downtime_deploy.py 
          aws s3 cp deployment.zip s3://$S3_BUCKET/deployment.zip

      # 10. CodeDeploy 배포
      - name: Deploy to CodeDeploy
        env:
          DEPLOY_APPLICATION: ${{ env.DEPLOY_APPLICATION }}
          DEPLOY_GROUP: ${{ env.DEPLOY_GROUP }}
          S3_BUCKET: ${{ env.S3_BUCKET }}
        run: |
          aws deploy create-deployment \
            --application-name $DEPLOY_APPLICATION \
            --deployment-group-name $DEPLOY_GROUP \
            --s3-location bucket=$S3_BUCKET,key=deployment.zip,bundleType=zip
